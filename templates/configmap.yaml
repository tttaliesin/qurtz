apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "qurtz.fullname" . }}-scripts
  labels:
    {{- include "qurtz.labels" . | nindent 4 }}
data:
  watcher.sh: |
    #!/bin/bash
    set -e
    
    echo "Starting file watcher for Obsidian vault at /vault"
    echo "Watching for events: {{ .Values.fileWatcher.events }}"
    
    # Function to trigger rebuild
    trigger_rebuild() {
        echo "File change detected at $(date): $1"
        touch /tmp/rebuild-trigger
        curl -X POST http://localhost:3001/rebuild || echo "Failed to trigger rebuild"
    }
    
    # Monitor vault directory for changes
    inotifywait -m -r -e {{ .Values.fileWatcher.events }} /vault --format '%w%f %e' |
    while read file event; do
        echo "Event: $event on $file"
        # Ignore hidden files and temporary files
        if [[ "$file" != */.* ]] && [[ "$file" != *~ ]] && [[ "$file" != *.tmp ]]; then
            trigger_rebuild "$file"
        fi
    done

  builder.sh: |
    #!/bin/bash
    set -e
    
    echo "Starting Quartz builder service"
    
    # Clone or update Quartz configuration
    if [ ! -d "/app/quartz" ]; then
        if [ -n "{{ .Values.quartz.gitRepo }}" ]; then
            echo "Cloning Quartz configuration from {{ .Values.quartz.gitRepo }}"
            git clone {{ .Values.quartz.gitRepo }} /app/quartz
            cd /app/quartz
            git checkout {{ .Values.quartz.gitBranch }}
        else
            echo "No git repository specified, creating default Quartz setup"
            mkdir -p /app/quartz
            cd /app/quartz
            npm create quartz@latest . -- --no-interactive
        fi
    else
        echo "Updating existing Quartz configuration"
        cd /app/quartz
        git pull origin {{ .Values.quartz.gitBranch }}
    fi
    
    # Install dependencies
    cd /app/quartz
    npm install
    
    # Function to build site
    build_site() {
        echo "Building Quartz site at $(date)"
        cd /app/quartz
        
        # Copy vault content to content directory
        rsync -av --delete /vault/ ./content/
        
        # Build the site
        npx quartz build
        
        # Copy output to shared volume
        rsync -av --delete ./public/ /app/public/
        
        echo "Build completed at $(date)"
    }
    
    # Initial build
    build_site
    
    # Start HTTP server for rebuild triggers
    cat > /tmp/server.js << 'EOF'
    const http = require('http');
    const { exec } = require('child_process');
    
    const server = http.createServer((req, res) => {
        if (req.method === 'POST' && req.url === '/rebuild') {
            console.log('Rebuild triggered via HTTP');
            exec('/app/scripts/build.sh', (error, stdout, stderr) => {
                if (error) {
                    console.error('Build error:', error);
                    res.writeHead(500);
                    res.end('Build failed');
                } else {
                    console.log('Build completed successfully');
                    res.writeHead(200);
                    res.end('Build completed');
                }
            });
        } else {
            res.writeHead(404);
            res.end('Not found');
        }
    });
    
    server.listen(3001, () => {
        console.log('Rebuild server listening on port 3001');
    });
    EOF
    
    # Start rebuild server in background
    node /tmp/server.js &
    
    # Watch for file-based triggers
    while true; do
        if [ -f "/tmp/rebuild-trigger" ]; then
            rm -f /tmp/rebuild-trigger
            build_site
        fi
        sleep {{ .Values.fileWatcher.pollInterval }}
    done

  build.sh: |
    #!/bin/bash
    set -e
    
    echo "Executing build at $(date)"
    cd /app/quartz
    
    # Copy vault content to content directory
    rsync -av --delete /vault/ ./content/
    
    # Build the site
    npx quartz build
    
    # Copy output to shared volume
    rsync -av --delete ./public/ /app/public/
    
    echo "Build completed at $(date)"